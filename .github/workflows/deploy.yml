name: Build and deploy workers and indexer

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Verify builds
        run: |
          echo "Checking if movie-browser build exists:"
          ls -la apps/movie-browser/.output/
          echo "Checking if download-manager build exists:"
          ls -la apps/download-manager/.output/

      - name: Create deployment archive
        run: |
          mkdir -p deployment/workers
          mkdir -p deployment/warforum-indexer
          mkdir -p deployment/download-manager
          mkdir -p deployment/movie-browser
          cp -r apps/workers/csfd/dist deployment/workers/csfd/
          cp -r apps/workers/rt/dist deployment/workers/rt/
          cp -r apps/workers/tmdb/dist deployment/workers/tmdb/
          cp -r apps/workers/webshare/dist deployment/workers/webshare/
          cp apps/warforum-indexer/dist/* deployment/warforum-indexer/
          cp -r apps/download-manager/.output deployment/download-manager/
          cp -r apps/movie-browser/.output deployment/movie-browser/
          cp ecosystem.config.js deployment/
          echo "Verifying deployment structure:"
          ls -la deployment/
          ls -la deployment/movie-browser/
          tar czf release.tar.gz deployment/

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:github-ci

      - name: Deploy to production
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RELEASE_DIR="/var/www/media-harvester/releases/$TIMESTAMP"

          ssh -o StrictHostKeyChecking=no deploy@prod-01 "mkdir -p $RELEASE_DIR"
          scp -o StrictHostKeyChecking=no release.tar.gz deploy@prod-01:$RELEASE_DIR/

          ssh -o StrictHostKeyChecking=no deploy@prod-01 "
            cd $RELEASE_DIR && \
            tar xzf release.tar.gz && \
            rm release.tar.gz && \
            rm -rf /var/www/media-harvester/current && \
            ln -sf $RELEASE_DIR /var/www/media-harvester/current && \
            cd /var/www/media-harvester/current/deployment && \
            echo 'Deployment structure:' && \
            ls -la && \
            echo 'Movie browser structure:' && \
            ls -la movie-browser/ && \
            echo 'Checking if movie-browser server file exists:' && \
            ls -la movie-browser/.output/server/ || echo 'Server directory not found' && \
            pm2 startOrRestart ecosystem.config.js && \
            cd /var/www/media-harvester/releases && \
            ls -1tr | head -n -5 | xargs -d '\n' rm -rf --
          "
